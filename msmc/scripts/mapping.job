#!/bin/sh

#SBATCH --time=168:00:00   # walltime
#SBATCH --nodes=1   # number of nodes
#SBATCH --mem-per-cpu=20600M   # memory per CPU core
#SBATCH -J "msmc_prep"   # job name
#SBATCH --mail-user=YOUREMAILHERE   # email address
#SBATCH --mail-type=BEGIN
#SBATCH --mail-type=END
#SBATCH --mail-type=FAIL
#SBATCH --array=1-9
#SBATCH -o %A_%a.minimap.out

# Set the max number of threads to use for programs using OpenMP. Should be <= ppn. Does nothing if the program doesn't use OpenMP.
export OMP_NUM_THREADS=$SLURM_CPUS_ON_NODE

# LOAD MODULES, INSERT CODE, AND RUN YOUR PROGRAMS HERE
source ~/.bashrc
conda activate msmc

args=$#

if [[ args -eq 2 ]]
then
	#check if fasta files have been indexed
	indexed=$(ls $2/*amb | wc -l)
	if [[ $indexed -eq 0 ]]
	then
		bwa index $2*fasta
	else
		echo "files previously indexed"
	fi

	checkpoints=$(ls $1 | grep "processed" | wc -l)
	if [[ $checkpoints -eq 0 ]]
	then 
		mkdir $1processed
	else
		echo "Processed directory made"
	fi	


	while read line;
	do
	echo "Checking status"
	x=_L002_R1_001.fastq.gz
	y=_L002_R2_001.fastq.gz
	forward="$line$x"
	reverse="$line$y"
	h=$(ls $1processed/$line.out.chr$SLURM_ARRAY_TASK_ID.bed | wc -l)
	i=$(ls $1processed/$line.out.chr$SLURM_ARRAY_TASK_ID.vcf.gz | wc -l)
	j=$(ls $1processed/$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam | wc -l)
	if [[ $i -gt 0 ]] 
	then
		echo "run $line_chr_$SLURM_ARRAY_TASK_ID complete"
	elif [[ $h -gt 0 ]]
	then
		echo "Resuming Variant Calling"
		BAM=$1processed/$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam
        	DEPTH=$(samtools depth $1processed/$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam | awk '{sum += $3} END {print sum / NR}')
	samtools mpileup -B -q 20 -Q 20 -C 50 -g -f chromosome_$SLURM_ARRAY_TASK_ID.fasta $BAM | bcftools call -c -V indels | python ../msmc-tools-master/bamCaller.py $DEPTH $1processed/$line.out.chr$SLURM_ARRAY_TASK_ID.bed  | gzip -c > $1$line.out.chr$SLURM_ARRAY_TASK_ID.vcf.gz
	elif [[ $j -gt 0 ]]
	then
		echo "Creating BED FILE"
		samtools index $1processed/$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam
        	BAM=$1processed/$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam
        	DEPTH=$(samtools depth $1processed/$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam | awk '{sum += $3} END {print sum / NR}')
        	bedtools bamtobed -i $BAM > $1$line.out.chr$SLURM_ARRAY_TASK_ID.bed
		cp $1$line.out.chr$SLURM_ARRAY_TASK_ID.bed $1processed/$line.out.chr$SLURM_ARRAY_TASK_ID.bed 
        	echo "bedfile is created! Starting variant calling"
        	samtools mpileup -B -q 20 -Q 20 -C 50 -g -f chromosome_$SLURM_ARRAY_TASK_ID.fasta $BAM | bcftools call -c -V indels | python ../msmc-tools-master/bamCaller.py $DEPTH $1processed/$line.out.chr$SLURM_ARRAY_TASK_ID.bed  | gzip -c > $1$line.out.chr$SLURM_ARRAY_TASK_ID.vcf.gz
        	mv $1$line.out.chr$SLURM_ARRAY_TASK_ID.vcf.gz $1processed
	else
		bwa mem chromosome_$SLURM_ARRAY_TASK_ID.fasta $1$forward $1$reverse | samtools view - -Sb | samtools sort - -@14 -o $1$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam
		echo "BWA IS FINISHED! Indexing BAM and creating bedfile"
		mv $1$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam $1processed
		samtools index $1processed/$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam
		BAM=$1processed/$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam
		DEPTH=$(samtools depth $1processed/$line.sorted.chr$SLURM_ARRAY_TASK_ID.bam | awk '{sum += $3} END {print sum / NR}')
		bedtools bamtobed -i $BAM > $1$line.out.chr$SLURM_ARRAY_TASK_ID.bed
        	cp $1$line.out.chr$SLURM_ARRAY_TASK_ID.bed $1processed/$line.out.chr$SLURM_ARRAY_TASK_ID.bed
		echo "bedfile is created! Starting variant calling"
        	samtools mpileup -B -q 20 -Q 20 -C 50 -g -f chromosome_$SLURM_ARRAY_TASK_ID.fasta $BAM | bcftools call -c -V indels | python ../msmc-tools-master/bamCaller.py $DEPTH $1processed/$line.out.chr$SLURM_ARRAY_TASK_ID.bed  | gzip -c > $1$line.out.chr$SLURM_ARRAY_TASK_ID.vcf.gz
        	mv $1$line.out.chr$SLURM_ARRAY_TASK_ID.vcf.gz $1processed
	fi
	done < $1names.txt

else
	echo "ERROR: Two arguments needed, path to data, path to chromosome fasta files"
fi
